################# aspx ####################################
<%@ Page Language="C#" AutoEventWireup="true" CodeBehind="exp15.aspx.cs" Inherits="form_validation.exp15" %>

<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml">
<head runat="server">
    <title></title>
    <script src="C:\Users\DELL\source\repos\form validation\form validation\Scripts\jquery-3.7.1.js"></script>
   
   
</head>
<body>
    <form id="form1" runat="server">
        <div>
            <h2>Registration Form</h2>
            <asp:TextBox ID="txtName" runat="server" placeholder="Name"></asp:TextBox><br />
            <asp:TextBox ID="txtEmail" runat="server" placeholder="Email"></asp:TextBox><br />
            <asp:TextBox ID="txtPassword" runat="server" TextMode="Password" placeholder="Password"></asp:TextBox><br />
            <asp:DropDownList ID="ddlCountry" runat="server" AutoPostBack="true">
                <asp:ListItem Text="--Select Country--" Value="" />
                <asp:ListItem Text="USA" Value="USA" />
                <asp:ListItem Text="Canada" Value="Canada" />
             
            </asp:DropDownList><br />
            <asp:CheckBox ID="chkTerms" runat="server" Text="I accept the terms and conditions." ValidationGroup="TermsValidation" /><br />
            <asp:CustomValidator ID="cvTerms" runat="server" 
                ErrorMessage="Please accept the terms and conditions." 
                OnServerValidate="CustomValidator_Terms" 
                 />
            <br />
            <asp:Button ID="btnSubmit" runat="server" Text="Submit" OnClick="btnSubmit_Click" ValidationGroup="TermsValidation" />
            <asp:Label ID="lblMessage" runat="server" ForeColor="Red"></asp:Label>
        </div>
    </form>
</body>
</html>


############################### cs ###################################################
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Xml.Linq;

namespace form_validation
{
    public partial class exp15 : System.Web.UI.Page
    {
        protected void Page_Load(object sender, EventArgs e)
        {

        }
        protected void btnSubmit_Click(object sender, EventArgs e)
        {
            // Validate the input when the submit button is clicked

            // Validate required fields
            if (string.IsNullOrWhiteSpace(txtName.Text) ||
                string.IsNullOrWhiteSpace(txtEmail.Text) ||
                string.IsNullOrWhiteSpace(txtPassword.Text))
            {
                lblMessage.Text = "Please fill in all required fields.";
                return;
            }

            // Validate email format using RegularExpressionValidator
            if (!IsValidEmail(txtEmail.Text))
            {
                lblMessage.Text = "Please enter a valid email address.";
                return;
            }

            // Validate password strength
            if (!IsValidPassword(txtPassword.Text))
            {
                lblMessage.Text = "Password must be at least 8 characters long and contain at least one uppercase letter, one lowercase letter, and one digit.";
                return;
            }

            // Validate whether the terms and conditions checkbox is checked
            if (!chkTerms.Checked)
            {
                lblMessage.Text = "Please accept the terms and conditions.";
                return;
            }

            // If all validations pass, you can proceed with further actions
            // For example, you might save the data to a database or perform other business logic

            lblMessage.Text = "Validation successful. Proceed with further actions.";
        }

        // Helper method to validate email format
        private bool IsValidEmail(string email)
        {
            try
            {
                var addr = new System.Net.Mail.MailAddress(email);
                return addr.Address == email;
            }
            catch
            {
                return false;
            }
        }

        // Helper method to validate password strength
        private bool IsValidPassword(string password)
        {
            // Customize the password strength requirements as needed
            return password.Length >= 8 &&
                   password.Any(char.IsUpper) &&
                   password.Any(char.IsLower) &&
                   password.Any(char.IsDigit);
        }

        // Custom validator for checking if the checkbox is checked
        protected void CustomValidator_Terms(object source, ServerValidateEventArgs args)
        {
            args.IsValid = chkTerms.Checked;
        }
    }
}

################################ web.config
<appSettings>
	<add key="ValidationSettings:UnobtrusiveValidationMode" value="None" />
</appSettings>

s