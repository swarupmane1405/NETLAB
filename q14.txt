################################ database warning
INSERT INTO Users (Username, Email, Password, MobileNumber) VALUES (@Username

############# web config

<appSettings>
	<add key="ValidationSettings:UnobtrusiveValidationMode" value="None" />
</appSettings>

################## aspx
<%@ Page Language="C#" AutoEventWireup="true" CodeBehind="sample.aspx.cs" Inherits="sample.sample" %>

<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml">
<head runat="server">
    <title></title>
    <style type="text/css">
        .auto-style1 {
            margin-left: 0px;
        }
        .auto-style2 {
            margin-left: 160px;
        }
    </style>
</head>
<body>
    <form id="form1" runat="server">
        <div class="auto-style2">
           <label for="txtUsername">Username:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </label>
            &nbsp;<asp:TextBox ID="txtUsername" runat="server" required CssClass="auto-style1"></asp:TextBox>
            <asp:CustomValidator ID="cvName" runat="server" ErrorMessage="Name should not contain any number." OnServerValidate="ValidateName"></asp:CustomValidator>
            <br />

            <label for="txtEmail">Email:</label>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            <asp:TextBox ID="txtEmail" runat="server" TextMode="Email" required></asp:TextBox>
            <asp:CustomValidator ID="cvEmail" runat="server" ErrorMessage="Invalid email format." OnServerValidate="ValidateEmail"></asp:CustomValidator>
            <br />

            <label for="txtPassword">Password:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </label>&nbsp;<asp:TextBox ID="txtPassword" runat="server" TextMode="Password" required></asp:TextBox>
            <br />

            <label for="txtMobileNumber">Mobile Number:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </label>&nbsp;<asp:TextBox ID="txtMobileNumber" runat="server" required></asp:TextBox>
            <asp:CustomValidator ID="cvMobileNumber" runat="server" ErrorMessage="Mobile number must be unique and 10 digits." OnServerValidate="ValidateMobileNumber"></asp:CustomValidator>
            <br />

            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;

            <asp:Button ID="btnRegister" runat="server" Text="Register" OnClick="btnRegister_Click" />
       
        </div>
    </form>
</body>
</html>

############################## cs

using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Linq;
using System.Text.RegularExpressions;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;

namespace sample
{
    public partial class sample : System.Web.UI.Page
    {
        protected void Page_Load(object sender, EventArgs e)
        {

        }

        protected void btnRegister_Click(object sender, EventArgs e)
        {
            // Validate the form
            if (Page.IsValid)
            {
                // Insert user data into the database
                string connectionString = "Data Source=localhost\\SQLEXPRESS;Initial Catalog=abc;Integrated Security=True";
                using (SqlConnection connection = new SqlConnection(connectionString))
                {
                    connection.Open();
                    string query = "INSERT INTO Users (Username, Email, Password, MobileNumber) VALUES (@Username, @Email, @Password, @MobileNumber)";
                    using (SqlCommand cmd = new SqlCommand(query, connection))
                    {
                        cmd.Parameters.AddWithValue("@Username", txtUsername.Text);
                        cmd.Parameters.AddWithValue("@Email", txtEmail.Text);
                        cmd.Parameters.AddWithValue("@Password", txtPassword.Text);
                        cmd.Parameters.AddWithValue("@MobileNumber", txtMobileNumber.Text);

                        cmd.ExecuteNonQuery();
                    }
                }

                // Registration successful, redirect or display a success message
                Response.Redirect("WebForm1.aspx"); // Redirect to a success page
            }
        }

        protected void ValidateMobileNumber(object source, System.Web.UI.WebControls.ServerValidateEventArgs args)
        {
            // Custom validation for mobile number (e.g., unique and 10 digits)
            args.IsValid = IsMobileNumberValid(txtMobileNumber.Text);
        }

        protected void ValidateName(object source, System.Web.UI.WebControls.ServerValidateEventArgs args)
        {
            // Custom validation for name (e.g., should not contain any number)
            args.IsValid = IsNameValid(txtUsername.Text);
        }

        protected void ValidateEmail(object source, System.Web.UI.WebControls.ServerValidateEventArgs args)
        {
            // Custom validation for email
            args.IsValid = IsEmailValid(txtEmail.Text);
        }

        private bool IsMobileNumberValid(string mobileNumber)
        {
            // Implement your validation logic here
            // Example: Check if the mobile number is unique and has 10 digits
            // You may need to query the database to check for uniqueness

            // For simplicity, let's assume the mobile number is valid
            return mobileNumber.Length == 10;
        }

        private bool IsNameValid(string name)
        {
            // Implement your validation logic here
            // Example: Check if the name contains any number
            return !Regex.IsMatch(name, @"\d");
        }

        private bool IsEmailValid(string email)
        {
            // Implement your validation logic here
            // Example: Check if the email is valid using a regular expression
            return Regex.IsMatch(email, @"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$");
        }
    }
}
